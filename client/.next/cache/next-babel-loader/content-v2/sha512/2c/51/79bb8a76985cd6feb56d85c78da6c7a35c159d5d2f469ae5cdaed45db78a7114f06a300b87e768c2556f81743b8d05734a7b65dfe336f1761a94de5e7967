{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloProvider, gql, useQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nimport './list.module.css';\nconst cardMap = new Map();\n\nconst updateCardMap = person => {\n  const index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nconst Card = ({\n  name,\n  email,\n  address,\n  phone\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: phone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = () => {\n  const {\n    loading,\n    data,\n    refetch\n  } = useQuery(query);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  data.list.map(updateCardMap);\n\n  const loadMore = async () => {\n    const {\n      data\n    } = await refetch();\n    data.list.map(updateCardMap);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), [...cardMap.values()].map((person, index) => /*#__PURE__*/_createElement(Card, _objectSpread(_objectSpread({}, person), {}, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    })))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\nconst ApolloWrapper = ({\n  apollo\n}) => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: apollo,\n  children: /*#__PURE__*/_jsxDEV(CardGrid, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 59,\n  columnNumber: 3\n}, this);\n\nexport default WithApollo(ApolloWrapper);","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["ApolloProvider","gql","useQuery","WithApollo","cardMap","Map","updateCardMap","person","index","size","set","Card","name","email","address","phone","query","CardGrid","loading","data","refetch","list","map","loadMore","values","ApolloWrapper","apollo"],"mappings":";;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,GAAzB,EAA2CC,QAA3C,QAA2D,gBAA3D;AACA,OAAOC,UAAP,MAAwC,oBAAxC;AACA,OAAO,mBAAP;AAEA,MAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;AAEA,MAAMC,aAAa,GAAIC,MAAD,IAAY;AAChC,QAAMC,KAAK,GAAGJ,OAAO,CAACK,IAAtB;AACAL,EAAAA,OAAO,CAACM,GAAR,CAAYF,KAAZ,EAAmBD,MAAnB;AACD,CAHD;;AAKA,MAAMI,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA;AAAxB,CAAD,KAAqC;AAChD,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAA,gBAAMH;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,MAAMC,KAAK,GAAGf,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMgB,QAAQ,GAAG,MAAmB;AAClC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA0ClB,QAAQ,CAACc,KAAD,CAAxD;;AAEA,MAAIE,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAEDC,EAAAA,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAchB,aAAd;;AAEA,QAAMiB,QAAQ,GAAG,YAA2B;AAC1C,UAAM;AAAEJ,MAAAA;AAAF,QAAW,MAAMC,OAAO,EAA9B;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAchB,aAAd;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAAC,GAAGnB,OAAO,CAACoB,MAAR,EAAJ,EAAsBF,GAAtB,CAA0B,CAACf,MAAD,EAASC,KAAT,kBACzB,eAAC,IAAD,kCAAUD,MAAV;AAAkB,MAAA,GAAG,EAAEC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAtBD;;AAwBA,MAAMiB,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACpB,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEA,MAAxB;AAAA,yBACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;AAKA,eAAevB,UAAU,CAACsB,aAAD,CAAzB","sourcesContent":["import { ApolloProvider, gql, QueryResult, useQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\nimport './list.module.css';\n\nconst cardMap = new Map();\n\nconst updateCardMap = (person) => {\n  const index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nconst Card = ({ name, email, address, phone }) => {\n  return (\n    <div className=\"card\">\n      <div>{name}</div>\n      <div>{email}</div>\n      <div>{address}</div>\n      <div>{phone}</div>\n    </div>\n  );\n};\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = (): JSX.Element => {\n  const { loading, data, refetch }: QueryResult = useQuery(query);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  data.list.map(updateCardMap);\n\n  const loadMore = async (): Promise<void> => {\n    const { data } = await refetch();\n    data.list.map(updateCardMap);\n  };\n\n  return (\n    <div>\n      <button onClick={loadMore}>more</button>\n      {[...cardMap.values()].map((person, index) => (\n        <Card {...person} key={index} />\n      ))}\n    </div>\n  );\n};\n\nconst ApolloWrapper = ({ apollo }: ApolloProps): JSX.Element => (\n  <ApolloProvider client={apollo}>\n    <CardGrid />\n  </ApolloProvider>\n);\nexport default WithApollo(ApolloWrapper);\n"]},"metadata":{},"sourceType":"module"}