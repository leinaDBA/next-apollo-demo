{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createElement as _createElement } from \"react\";\nimport _regeneratorRuntime from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    list {\\n      name\\n      address\\n      email\\n      phone\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ApolloProvider, gql, useQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nimport Card from '../components/Card';\nimport styles from './list.module.css';\nimport { useState } from 'react';\nvar cardMap = new Map();\n\nvar updateCardMap = function updateCardMap(person) {\n  var index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nvar query = gql(_templateObject());\n\nvar CardGrid = function CardGrid() {\n  _s();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      cardData = _useState2[0],\n      setCardData = _useState2[1];\n\n  var _useQuery = useQuery(query, {\n    onCompleted: function onCompleted(_ref) {\n      var list = _ref.list;\n      return setCardData(list);\n    }\n  }),\n      loading = _useQuery.loading,\n      refetch = _useQuery.refetch;\n\n  setIsLoading(loading);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var loadMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return refetch();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: cardData.map(function (person, index) {\n        return /*#__PURE__*/_createElement(Card, _objectSpread(_objectSpread({}, person), {}, {\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 11\n          }\n        }));\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(CardGrid, \"s+j16gPkcNfDYNNQgwTF2nQNjxM=\", false, function () {\n  return [useQuery];\n});\n\n_c = CardGrid;\n\nvar ApolloWrapper = function ApolloWrapper(_ref3) {\n  var apollo = _ref3.apollo;\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: apollo,\n    children: /*#__PURE__*/_jsxDEV(CardGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, _this);\n};\n\n_c2 = ApolloWrapper;\nexport default _c3 = WithApollo(ApolloWrapper);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CardGrid\");\n$RefreshReg$(_c2, \"ApolloWrapper\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["ApolloProvider","gql","useQuery","WithApollo","Card","styles","useState","cardMap","Map","updateCardMap","person","index","size","set","query","CardGrid","isLoading","setIsLoading","cardData","setCardData","onCompleted","list","loading","refetch","loadMore","container","map","ApolloWrapper","apollo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,GAAzB,EAA2CC,QAA3C,QAA2D,gBAA3D;AACA,OAAOC,UAAP,MAAwC,oBAAxC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,IAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAY;AAChC,MAAMC,KAAK,GAAGJ,OAAO,CAACK,IAAtB;AACAL,EAAAA,OAAO,CAACM,GAAR,CAAYF,KAAZ,EAAmBD,MAAnB;AACD,CAHD;;AAKA,IAAMI,KAAK,GAAGb,GAAH,mBAAX;;AAWA,IAAMc,QAAQ,GAAG,SAAXA,QAAW,GAAmB;AAAA;;AAAA,kBACAT,QAAQ,CAAC,KAAD,CADR;AAAA,MAC3BU,SAD2B;AAAA,MAChBC,YADgB;;AAAA,mBAEFX,QAAQ,CAAC,EAAD,CAFN;AAAA,MAE3BY,QAF2B;AAAA,MAEjBC,WAFiB;;AAAA,kBAGQjB,QAAQ,CAACY,KAAD,EAAQ;AACxDM,IAAAA,WAAW,EAAE;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aAAcF,WAAW,CAACE,IAAD,CAAzB;AAAA;AAD2C,GAAR,CAHhB;AAAA,MAG1BC,OAH0B,aAG1BA,OAH0B;AAAA,MAGjBC,OAHiB,aAGjBA,OAHiB;;AAMlCN,EAAAA,YAAY,CAACK,OAAD,CAAZ;;AAEA,MAAIA,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,MAAME,QAAQ;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACTD,OAAO,EADE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARC,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAIA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEA,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAK,MAAA,SAAS,EAAEnB,MAAM,CAACoB,SAAvB;AAAA,gBACGP,QAAQ,CAACQ,GAAT,CAAa,UAAChB,MAAD,EAASC,KAAT;AAAA,4BACZ,eAAC,IAAD,kCAAUD,MAAV;AAAkB,UAAA,GAAG,EAAEC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADY;AAAA,OAAb;AADH;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA,kBADF;AAUD,CA1BD;;GAAMI,Q;UAGsCb,Q;;;KAHtCa,Q;;AA4BN,IAAMY,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,MAAH,SAAGA,MAAH;AAAA,sBACpB,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEA,MAAxB;AAAA,2BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADoB;AAAA,CAAtB;;MAAMD,a;AAKN,qBAAexB,UAAU,CAACwB,aAAD,CAAzB","sourcesContent":["import { ApolloProvider, gql, QueryResult, useQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\nimport Card from '../components/Card';\nimport styles from './list.module.css';\nimport { useState } from 'react';\n\nconst cardMap = new Map();\n\nconst updateCardMap = (person) => {\n  const index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = (): JSX.Element => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [cardData, setCardData] = useState([]);\n  const { loading, refetch }: QueryResult = useQuery(query, {\n    onCompleted: ({ list }) => setCardData(list),\n  });\n  setIsLoading(loading);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  const loadMore = async (): Promise<void> => {\n    await refetch();\n  };\n\n  return (\n    <>\n      <button onClick={loadMore}>more</button>\n      <div className={styles.container}>\n        {cardData.map((person, index) => (\n          <Card {...person} key={index} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nconst ApolloWrapper = ({ apollo }: ApolloProps): JSX.Element => (\n  <ApolloProvider client={apollo}>\n    <CardGrid />\n  </ApolloProvider>\n);\nexport default WithApollo(ApolloWrapper);\n"]},"metadata":{},"sourceType":"module"}