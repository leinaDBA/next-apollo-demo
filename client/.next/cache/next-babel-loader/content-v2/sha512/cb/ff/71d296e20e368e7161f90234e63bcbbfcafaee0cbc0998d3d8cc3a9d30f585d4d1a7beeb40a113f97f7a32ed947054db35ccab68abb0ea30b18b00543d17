{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FixedSizeList as List } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { ApolloProvider, gql, useQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 300;\nconst ROW_HEIGHT = 200;\nconst cardMap = new Map();\n\nconst updateCardMap = person => {\n  const index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nconst Cell = ({\n  index,\n  style\n}) => {\n  const person = cardMap.get(index);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0'\n    }),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.phone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\nconst LOADING = 1;\nconst LOADED = 2;\nconst itemStatusMap = {};\n\nconst isItemLoaded = index => !!itemStatusMap[index];\n\nconst loadMoreItems = (startIndex, stopIndex) => {\n  for (let index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n\n  return new Promise(resolve => setTimeout(() => {\n    for (let index = startIndex; index <= stopIndex; index++) {\n      itemStatusMap[index] = LOADED;\n    }\n\n    resolve();\n  }, 2500));\n};\n\nconst CardGrid = () => {\n  const {\n    loading,\n    data,\n    refetch\n  } = useQuery(query);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n\n  data.list.map(updateCardMap);\n\n  const loadMore = async () => {\n    const {\n      data\n    } = await refetch();\n    data.list.map(updateCardMap);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100vw'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AutoSizer, {\n      defaultHeight: window.innerHeight,\n      defaultWidth: window.innerWidth,\n      children: ({\n        height,\n        width\n      }) => /*#__PURE__*/_jsxDEV(InfiniteLoader, {\n        isItemLoaded: isItemLoaded,\n        itemCount: 1000,\n        loadMoreItems: loadMoreItems,\n        children: ({\n          onItemsRendered,\n          ref\n        }) => /*#__PURE__*/_jsxDEV(List, {\n          onItemsRendered: onItemsRendered,\n          ref: ref,\n          height: height,\n          width: width,\n          itemCount: cardMap.size,\n          itemSize: height,\n          children: props => /*#__PURE__*/_jsxDEV(Cell, _objectSpread({}, props), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\nconst ApolloWrapper = ({\n  apollo\n}) => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: apollo,\n  children: /*#__PURE__*/_jsxDEV(CardGrid, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 117,\n  columnNumber: 3\n}, this);\n\nexport default WithApollo(ApolloWrapper);","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["FixedSizeList","List","InfiniteLoader","AutoSizer","ApolloProvider","gql","useQuery","WithApollo","GUTTER_SIZE","COLUMN_WIDTH","ROW_HEIGHT","cardMap","Map","updateCardMap","person","index","size","set","Cell","style","get","left","top","width","height","display","alignItems","justifyContent","backgroundColor","name","email","address","phone","query","LOADING","LOADED","itemStatusMap","isItemLoaded","loadMoreItems","startIndex","stopIndex","Promise","resolve","setTimeout","CardGrid","loading","data","refetch","list","map","loadMore","window","innerHeight","innerWidth","onItemsRendered","ref","props","ApolloWrapper","apollo"],"mappings":"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","sourcesContent":["import { FixedSizeList as List, GridOnItemsRenderedProps } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { ApolloProvider, gql, QueryResult, useQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\n\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 300;\nconst ROW_HEIGHT = 200;\n\nconst cardMap = new Map();\n\nconst updateCardMap = (person) => {\n  const index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nconst Cell = ({ index, style }) => {\n  const person = cardMap.get(index);\n\n  return (\n    <div\n      style={{\n        ...style,\n        left: style.left + GUTTER_SIZE,\n        top: style.top + GUTTER_SIZE,\n        width: style.width - GUTTER_SIZE,\n        height: style.height - GUTTER_SIZE,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#f8f8f0',\n      }}\n    >\n      <div>{person.name}</div>\n      <div>{person.email}</div>\n      <div>{person.address}</div>\n      <div>{person.phone}</div>\n    </div>\n  );\n};\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst LOADING = 1;\nconst LOADED = 2;\nconst itemStatusMap = {};\nconst isItemLoaded = (index) => !!itemStatusMap[index];\nconst loadMoreItems = (startIndex, stopIndex) => {\n  for (let index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      for (let index = startIndex; index <= stopIndex; index++) {\n        itemStatusMap[index] = LOADED;\n      }\n      resolve();\n    }, 2500),\n  );\n};\n\nconst CardGrid = (): JSX.Element => {\n  const { loading, data, refetch }: QueryResult = useQuery(query);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  data.list.map(updateCardMap);\n\n  const loadMore = async (): Promise<void> => {\n    const { data } = await refetch();\n    data.list.map(updateCardMap);\n  };\n\n  return (\n    <div\n      style={{\n        height: '100vh',\n        width: '100vw',\n      }}\n    >\n      <button onClick={loadMore}>more</button>\n      <AutoSizer defaultHeight={window.innerHeight} defaultWidth={window.innerWidth}>\n        {({ height, width }) => (\n          <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={1000} loadMoreItems={loadMoreItems}>\n            {({ onItemsRendered, ref }) => (\n              <List\n                onItemsRendered={onItemsRendered}\n                ref={ref}\n                height={height}\n                width={width}\n                itemCount={cardMap.size}\n                itemSize={height}\n              >\n                {(props) => <Cell {...props} />}\n              </List>\n            )}\n          </InfiniteLoader>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst ApolloWrapper = ({ apollo }: ApolloProps): JSX.Element => (\n  <ApolloProvider client={apollo}>\n    <CardGrid />\n  </ApolloProvider>\n);\nexport default WithApollo(ApolloWrapper);\n"]},"metadata":{},"sourceType":"module"}