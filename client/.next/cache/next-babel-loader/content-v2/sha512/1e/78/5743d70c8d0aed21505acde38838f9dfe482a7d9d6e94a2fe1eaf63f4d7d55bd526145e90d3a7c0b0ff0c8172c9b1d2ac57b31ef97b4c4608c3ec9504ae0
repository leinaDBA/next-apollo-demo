{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloProvider, gql, useQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nimport Card from '../components/Card';\nimport styles from './list.module.css';\nimport { useState } from 'react';\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = ({\n  apollo\n}) => {\n  const {\n    0: cardData,\n    1: setCardData\n  } = useState([]);\n  const {\n    refetch\n  } = useQuery(query, {\n    onCompleted: ({\n      list\n    }) => setCardData([...cardData, ...list]),\n    notifyOnNetworkStatusChange: true\n  });\n\n  if (!cardData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  const loadMore = async () => {\n    await refetch();\n  };\n\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: apollo,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.stickyButton,\n      onClick: loadMore,\n      children: \"Load more cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: cardData.map((person, index) => /*#__PURE__*/_createElement(Card, _objectSpread(_objectSpread({}, person), {}, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      })))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\nexport default WithApollo(CardGrid);","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["ApolloProvider","gql","useQuery","WithApollo","Card","styles","useState","query","CardGrid","apollo","cardData","setCardData","refetch","onCompleted","list","notifyOnNetworkStatusChange","loadMore","stickyButton","container","map","person","index"],"mappings":";;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,GAAzB,EAA2CC,QAA3C,QAA2D,gBAA3D;AACA,OAAOC,UAAP,MAAwC,oBAAxC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAmCC,QAAnC,QAAmD,OAAnD;AAEA,MAAMC,KAAK,GAAGN,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMO,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0C;AACzD,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0EL,QAAQ,CAAW,EAAX,CAAxF;AAEA,QAAM;AAAEM,IAAAA;AAAF,MAA2BV,QAAQ,CAACK,KAAD,EAAQ;AAC/CM,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkCH,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAc,GAAGI,IAAjB,CAAD,CADX;AAE/CC,IAAAA,2BAA2B,EAAE;AAFkB,GAAR,CAAzC;;AAKA,MAAI,CAACL,QAAL,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMM,QAAQ,GAAG,YAA2B;AAC1C,UAAMJ,OAAO,EAAb;AACD,GAFD;;AAGA,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAEJ,MAAM,CAACY,YAA1B;AAAwC,MAAA,OAAO,EAAED,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAEX,MAAM,CAACa,SAAvB;AAAA,gBACGR,QAAQ,CAACS,GAAT,CAAa,CAACC,MAAD,EAAiBC,KAAjB,kBACZ,eAAC,IAAD,kCAAUD,MAAV;AAAkB,QAAA,GAAG,EAAEC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA3BD;;AA6BA,eAAelB,UAAU,CAACK,QAAD,CAAzB","sourcesContent":["import { ApolloProvider, gql, QueryResult, useQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\nimport Card from '../components/Card';\nimport styles from './list.module.css';\nimport { Dispatch, SetStateAction, useState } from 'react';\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = ({ apollo }: ApolloProps): JSX.Element => {\n  const [cardData, setCardData]: [Person[], Dispatch<SetStateAction<Person[]>>] = useState<Person[]>([]);\n\n  const { refetch }: QueryResult = useQuery(query, {\n    onCompleted: ({ list }: { list: Person[] }) => setCardData([...cardData, ...list]),\n    notifyOnNetworkStatusChange: true,\n  });\n\n  if (!cardData) {\n    return <div>Loading</div>;\n  }\n\n  const loadMore = async (): Promise<void> => {\n    await refetch();\n  };\n  return (\n    <ApolloProvider client={apollo}>\n      <button className={styles.stickyButton} onClick={loadMore}>\n        Load more cards\n      </button>\n      <div className={styles.container}>\n        {cardData.map((person: Person, index: number) => (\n          <Card {...person} key={index} />\n        ))}\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default WithApollo(CardGrid);\n"]},"metadata":{},"sourceType":"module"}