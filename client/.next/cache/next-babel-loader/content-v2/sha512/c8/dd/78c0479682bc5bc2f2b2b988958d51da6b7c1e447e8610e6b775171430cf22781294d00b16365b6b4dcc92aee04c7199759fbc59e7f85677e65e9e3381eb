{"ast":null,"code":"import _regeneratorRuntime from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    list {\\n      name\\n      address\\n      email\\n      phone\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloProvider, gql, useQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nvar cardMap = new Map();\n\nvar updateCardMap = function updateCardMap(person) {\n  var index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nvar Card = function Card(_ref) {\n  var index = _ref.index,\n      style = _ref.style;\n  var person = cardMap.get(index);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0'\n    }),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: person.phone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Card;\nvar query = gql(_templateObject());\n\nvar CardGrid = function CardGrid() {\n  _s();\n\n  var _useQuery = useQuery(query),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      refetch = _useQuery.refetch;\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, _this);\n  }\n\n  data.list.map(updateCardMap);\n\n  var loadMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$refetch, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return refetch();\n\n            case 2:\n              _yield$refetch = _context.sent;\n              data = _yield$refetch.data;\n              data.list.map(updateCardMap);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100vw'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CardGrid, \"5dDjjW8HaozHbllu6kLnl4+6iuI=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = CardGrid;\n\nvar ApolloWrapper = function ApolloWrapper(_ref3) {\n  var apollo = _ref3.apollo;\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: apollo,\n    children: /*#__PURE__*/_jsxDEV(CardGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, _this);\n};\n\n_c3 = ApolloWrapper;\nexport default _c4 = WithApollo(ApolloWrapper);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardGrid\");\n$RefreshReg$(_c3, \"ApolloWrapper\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["ApolloProvider","gql","useQuery","WithApollo","cardMap","Map","updateCardMap","person","index","size","set","Card","style","get","left","GUTTER_SIZE","top","width","height","display","alignItems","justifyContent","backgroundColor","name","email","address","phone","query","CardGrid","loading","data","refetch","list","map","loadMore","ApolloWrapper","apollo"],"mappings":"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","sourcesContent":["import { ApolloProvider, gql, QueryResult, useQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\n\nconst cardMap = new Map();\n\nconst updateCardMap = (person) => {\n  const index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nconst Card = ({ index, style }) => {\n  const person = cardMap.get(index);\n\n  return (\n    <div\n      style={{\n        ...style,\n        left: style.left + GUTTER_SIZE,\n        top: style.top + GUTTER_SIZE,\n        width: style.width - GUTTER_SIZE,\n        height: style.height - GUTTER_SIZE,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#f8f8f0',\n      }}\n    >\n      <div>{person.name}</div>\n      <div>{person.email}</div>\n      <div>{person.address}</div>\n      <div>{person.phone}</div>\n    </div>\n  );\n};\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = (): JSX.Element => {\n  const { loading, data, refetch }: QueryResult = useQuery(query);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  data.list.map(updateCardMap);\n\n  const loadMore = async (): Promise<void> => {\n    const { data } = await refetch();\n    data.list.map(updateCardMap);\n  };\n\n  return (\n    <div\n      style={{\n        height: '100vh',\n        width: '100vw',\n      }}\n    >\n      <button onClick={loadMore}>more</button>\n    </div>\n  );\n};\n\nconst ApolloWrapper = ({ apollo }: ApolloProps): JSX.Element => (\n  <ApolloProvider client={apollo}>\n    <CardGrid />\n  </ApolloProvider>\n);\nexport default WithApollo(ApolloWrapper);\n"]},"metadata":{},"sourceType":"module"}