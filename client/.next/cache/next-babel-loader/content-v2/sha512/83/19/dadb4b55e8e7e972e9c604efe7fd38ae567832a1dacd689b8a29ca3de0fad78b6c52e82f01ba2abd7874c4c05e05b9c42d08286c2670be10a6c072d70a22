{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    list {\\n      name\\n      address\\n      email\\n      phone\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FixedSizeGrid as Grid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport { gql, useQuery } from '@apollo/client';\nvar GUTTER_SIZE = 5;\nvar COLUMN_WIDTH = 100;\nvar ROW_HEIGHT = 35;\n\nvar Cell = function Cell(_ref) {\n  var columnIndex = _ref.columnIndex,\n      rowIndex = _ref.rowIndex,\n      style = _ref.style;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0'\n    }),\n    children: [\"r\", rowIndex, \", c\", columnIndex]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = Cell;\nvar query = gql(_templateObject());\nvar LOADING = 1;\nvar LOADED = 2;\nvar itemStatusMap = {};\n\nvar isItemLoaded = function isItemLoaded(index) {\n  return !!itemStatusMap[index];\n};\n\nvar loadMoreItems = function loadMoreItems(startIndex, stopIndex) {\n  for (var index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n\n  return new Promise(function (resolve) {\n    return setTimeout(function () {\n      for (var _index = startIndex; _index <= stopIndex; _index++) {\n        itemStatusMap[_index] = LOADED;\n      }\n\n      resolve();\n    }, 2500);\n  });\n};\n\nvar Example = function Example() {\n  _s();\n\n  var _useQuery = useQuery(query),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore;\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var loadMore = function loadMore() {\n    fetchMore({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(InfiniteLoader, {\n      isItemLoaded: isItemLoaded,\n      itemCount: 1000,\n      loadMoreItems: loadMoreItems,\n      children: function children(_ref2) {\n        var onItemsRendered = _ref2.onItemsRendered,\n            ref = _ref2.ref;\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          ref: ref,\n          onItemsRendered: onItemsRendered,\n          columnCount: 50,\n          columnWidth: COLUMN_WIDTH + GUTTER_SIZE,\n          height: 150,\n          rowCount: 100,\n          rowHeight: ROW_HEIGHT + GUTTER_SIZE,\n          width: 300,\n          children: Cell\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Example, \"mdoo00PNqlPyQofniS94hAFq32Y=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Example;\nexport default Example;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Example\");","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["FixedSizeGrid","Grid","InfiniteLoader","gql","useQuery","GUTTER_SIZE","COLUMN_WIDTH","ROW_HEIGHT","Cell","columnIndex","rowIndex","style","left","top","width","height","display","alignItems","justifyContent","backgroundColor","query","LOADING","LOADED","itemStatusMap","isItemLoaded","index","loadMoreItems","startIndex","stopIndex","Promise","resolve","setTimeout","Example","loading","data","fetchMore","loadMore","onItemsRendered","ref"],"mappings":"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","sourcesContent":["import { FixedSizeGrid as Grid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport { gql, QueryResult, useQuery } from '@apollo/client';\n\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    style={{\n      ...style,\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0',\n    }}\n  >\n    r{rowIndex}, c{columnIndex}\n  </div>\n);\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst LOADING = 1;\nconst LOADED = 2;\nconst itemStatusMap = {};\nconst isItemLoaded = (index) => !!itemStatusMap[index];\nconst loadMoreItems = (startIndex, stopIndex) => {\n  for (let index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      for (let index = startIndex; index <= stopIndex; index++) {\n        itemStatusMap[index] = LOADED;\n      }\n      resolve();\n    }, 2500),\n  );\n};\n\nconst Example = () => {\n  const { loading, data, fetchMore }: QueryResult = useQuery(query);\n  if (loading) {\n    return <div>Loading</div>;\n  }\n  const loadMore = () => {\n    fetchMore({});\n  };\n  return (\n    <>\n      <button onClick={loadMore}>more</button>\n      <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={1000} loadMoreItems={loadMoreItems}>\n        {({ onItemsRendered, ref }) => (\n          <Grid\n            ref={ref}\n            onItemsRendered={onItemsRendered as GridOnItemsRenderedProps}\n            columnCount={50}\n            columnWidth={COLUMN_WIDTH + GUTTER_SIZE}\n            height={150}\n            rowCount={100}\n            rowHeight={ROW_HEIGHT + GUTTER_SIZE}\n            width={300}\n          >\n            {Cell}\n          </Grid>\n        )}\n      </InfiniteLoader>\n    </>\n  );\n};\n\nexport default Example;\n"]},"metadata":{},"sourceType":"module"}