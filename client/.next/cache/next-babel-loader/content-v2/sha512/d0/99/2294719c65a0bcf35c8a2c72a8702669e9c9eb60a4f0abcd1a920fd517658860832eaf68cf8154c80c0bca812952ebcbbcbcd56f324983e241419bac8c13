{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FixedSizeGrid as Grid } from 'react-window';\nimport { forwardRef } from 'react';\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({\n  columnIndex,\n  rowIndex,\n  style\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: 'GridItem',\n  style: _objectSpread(_objectSpread({}, style), {}, {\n    left: style.left + GUTTER_SIZE,\n    top: style.top + GUTTER_SIZE,\n    width: style.width - GUTTER_SIZE,\n    height: style.height - GUTTER_SIZE,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#f8f8f0'\n  }),\n  children: [\"r\", rowIndex, \", c\", columnIndex]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n\nconst Example = () => /*#__PURE__*/_jsxDEV(Grid, {\n  className: \"Grid\",\n  columnCount: 50,\n  columnWidth: COLUMN_WIDTH + GUTTER_SIZE,\n  height: 150,\n  rowCount: 100,\n  rowHeight: ROW_HEIGHT + GUTTER_SIZE,\n  width: 300,\n  children: Cell\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 28,\n  columnNumber: 3\n}, this);\n\nconst innerElementType = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    style\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"style\"]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread({\n    ref: ref,\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      paddingLeft: GUTTER_SIZE,\n      paddingTop: GUTTER_SIZE\n    })\n  }, rest), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this);\n});\nexport default Example;","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["FixedSizeGrid","Grid","forwardRef","GUTTER_SIZE","COLUMN_WIDTH","ROW_HEIGHT","Cell","columnIndex","rowIndex","style","left","top","width","height","display","alignItems","justifyContent","backgroundColor","Example","innerElementType","ref","rest","paddingLeft","paddingTop"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,aAAa,IAAIC,IAA1B,QAAsC,cAAtC;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,YAAY,GAAG,GAArB;AACA,MAAMC,UAAU,GAAG,EAAnB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,kBACX;AACE,EAAA,SAAS,EAAE,UADb;AAEE,EAAA,KAAK,kCACAA,KADA;AAEHC,IAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,GAAaP,WAFhB;AAGHQ,IAAAA,GAAG,EAAEF,KAAK,CAACE,GAAN,GAAYR,WAHd;AAIHS,IAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAcT,WAJlB;AAKHU,IAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,GAAeV,WALpB;AAMHW,IAAAA,OAAO,EAAE,MANN;AAOHC,IAAAA,UAAU,EAAE,QAPT;AAQHC,IAAAA,cAAc,EAAE,QARb;AASHC,IAAAA,eAAe,EAAE;AATd,IAFP;AAAA,kBAcIT,QAdJ,SAciBD,WAdjB;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAmBA,MAAMW,OAAO,GAAG,mBACd,QAAC,IAAD;AACE,EAAA,SAAS,EAAC,MADZ;AAEE,EAAA,WAAW,EAAE,EAFf;AAGE,EAAA,WAAW,EAAEd,YAAY,GAAGD,WAH9B;AAIE,EAAA,MAAM,EAAE,GAJV;AAKE,EAAA,QAAQ,EAAE,GALZ;AAME,EAAA,SAAS,EAAEE,UAAU,GAAGF,WAN1B;AAOE,EAAA,KAAK,EAAE,GAPT;AAAA,YASGG;AATH;AAAA;AAAA;AAAA;AAAA,QADF;;AAcA,MAAMa,gBAAgB,gBAAGjB,UAAU,CAAC,OAAqBkB,GAArB;AAAA,MAAC;AAAEX,IAAAA;AAAF,GAAD;AAAA,MAAaY,IAAb;;AAAA,sBAClC;AACE,IAAA,GAAG,EAAED,GADP;AAEE,IAAA,KAAK,kCACAX,KADA;AAEHa,MAAAA,WAAW,EAAEnB,WAFV;AAGHoB,MAAAA,UAAU,EAAEpB;AAHT;AAFP,KAOMkB,IAPN;AAAA;AAAA;AAAA;AAAA,UADkC;AAAA,CAAD,CAAnC;AAYA,eAAeH,OAAf","sourcesContent":["import { FixedSizeGrid as Grid } from 'react-window';\nimport { forwardRef } from 'react';\n\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    className={'GridItem'}\n    style={{\n      ...style,\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0',\n    }}\n  >\n    r{rowIndex}, c{columnIndex}\n  </div>\n);\n\nconst Example = () => (\n  <Grid\n    className=\"Grid\"\n    columnCount={50}\n    columnWidth={COLUMN_WIDTH + GUTTER_SIZE}\n    height={150}\n    rowCount={100}\n    rowHeight={ROW_HEIGHT + GUTTER_SIZE}\n    width={300}\n  >\n    {Cell}\n  </Grid>\n);\n\nconst innerElementType = forwardRef(({ style, ...rest }, ref) => (\n  <div\n    ref={ref}\n    style={{\n      ...style,\n      paddingLeft: GUTTER_SIZE,\n      paddingTop: GUTTER_SIZE,\n    }}\n    {...rest}\n  />\n));\n\nexport default Example;\n"]},"metadata":{},"sourceType":"module"}