{"ast":null,"code":"import _regeneratorRuntime from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/le15/IdeaProjects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    list {\\n      name\\n      address\\n      email\\n      phone\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FixedSizeGrid as Grid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { ApolloProvider, gql, useQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nvar GUTTER_SIZE = 5;\nvar COLUMN_WIDTH = 100;\nvar ROW_HEIGHT = 35;\n\nvar Cell = function Cell(_ref) {\n  var columnIndex = _ref.columnIndex,\n      rowIndex = _ref.rowIndex,\n      style = _ref.style;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0'\n    }),\n    children: [\"r\", rowIndex, \", c\", columnIndex]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = Cell;\nvar query = gql(_templateObject());\nvar LOADING = 1;\nvar LOADED = 2;\nvar itemStatusMap = {};\n\nvar isItemLoaded = function isItemLoaded(index) {\n  return !!itemStatusMap[index];\n};\n\nvar loadMoreItems = function loadMoreItems(startIndex, stopIndex) {\n  for (var index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n\n  return new Promise(function (resolve) {\n    return setTimeout(function () {\n      for (var _index = startIndex; _index <= stopIndex; _index++) {\n        itemStatusMap[_index] = LOADED;\n      }\n\n      resolve();\n    }, 2500);\n  });\n};\n\nvar cardMap = new Map();\n\nvar updateCardMap = function updateCardMap(person) {\n  var index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nvar CardGrid = function CardGrid() {\n  _s();\n\n  var _useQuery = useQuery(query),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      refetch = _useQuery.refetch;\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, _this);\n  }\n\n  data.list.map(function (person) {});\n\n  var loadMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$refetch, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return refetch();\n\n            case 2:\n              _yield$refetch = _context.sent;\n              data = _yield$refetch.data;\n              // eslint-disable-next-line no-debugger\n              debugger;\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100vw'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AutoSizer, {\n      defaultHeight: window.innerHeight,\n      defaultWidth: window.innerWidth,\n      children: function children(_ref3) {\n        var height = _ref3.height,\n            width = _ref3.width;\n        return /*#__PURE__*/_jsxDEV(InfiniteLoader, {\n          isItemLoaded: isItemLoaded,\n          itemCount: 1000,\n          loadMoreItems: loadMoreItems,\n          children: function children(_ref4) {\n            var onItemsRendered = _ref4.onItemsRendered,\n                ref = _ref4.ref;\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              ref: ref,\n              onItemsRendered: onItemsRendered,\n              columnCount: 4,\n              columnWidth: COLUMN_WIDTH + GUTTER_SIZE,\n              height: height,\n              rowCount: 5,\n              rowHeight: ROW_HEIGHT + GUTTER_SIZE,\n              width: width,\n              children: function children(props) {\n                return /*#__PURE__*/_jsxDEV(Cell, _objectSpread({}, props), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 29\n                }, _this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CardGrid, \"5dDjjW8HaozHbllu6kLnl4+6iuI=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = CardGrid;\n\nvar ApolloWrapper = function ApolloWrapper(_ref5) {\n  var apollo = _ref5.apollo;\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: apollo,\n    children: /*#__PURE__*/_jsxDEV(CardGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 3\n  }, _this);\n};\n\n_c3 = ApolloWrapper;\nexport default _c4 = WithApollo(ApolloWrapper);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"CardGrid\");\n$RefreshReg$(_c3, \"ApolloWrapper\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["FixedSizeGrid","Grid","InfiniteLoader","AutoSizer","ApolloProvider","gql","useQuery","WithApollo","GUTTER_SIZE","COLUMN_WIDTH","ROW_HEIGHT","Cell","columnIndex","rowIndex","style","left","top","width","height","display","alignItems","justifyContent","backgroundColor","query","LOADING","LOADED","itemStatusMap","isItemLoaded","index","loadMoreItems","startIndex","stopIndex","Promise","resolve","setTimeout","cardMap","Map","updateCardMap","person","size","set","CardGrid","loading","data","refetch","list","map","loadMore","window","innerHeight","innerWidth","onItemsRendered","ref","props","ApolloWrapper","apollo"],"mappings":"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","sourcesContent":["import { FixedSizeGrid as Grid, GridOnItemsRenderedProps } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { ApolloProvider, gql, QueryResult, useQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\n\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    style={{\n      ...style,\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0',\n    }}\n  >\n    r{rowIndex}, c{columnIndex}\n  </div>\n);\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst LOADING = 1;\nconst LOADED = 2;\nconst itemStatusMap = {};\nconst isItemLoaded = (index) => !!itemStatusMap[index];\nconst loadMoreItems = (startIndex, stopIndex) => {\n  for (let index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      for (let index = startIndex; index <= stopIndex; index++) {\n        itemStatusMap[index] = LOADED;\n      }\n      resolve();\n    }, 2500),\n  );\n};\n\nconst cardMap = new Map();\n\nconst updateCardMap = (person) => {\n  const index = cardMap.size;\n  cardMap.set(index, person);\n};\n\nconst CardGrid = (): JSX.Element => {\n  const { loading, data, refetch }: QueryResult = useQuery(query);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  data.list.map((person) => {});\n  const loadMore = async (): Promise<void> => {\n    const { data } = await refetch();\n    // eslint-disable-next-line no-debugger\n    debugger;\n  };\n\n  return (\n    <div\n      style={{\n        height: '100vh',\n        width: '100vw',\n      }}\n    >\n      <button onClick={loadMore}>more</button>\n      <AutoSizer defaultHeight={window.innerHeight} defaultWidth={window.innerWidth}>\n        {({ height, width }) => (\n          <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={1000} loadMoreItems={loadMoreItems}>\n            {({ onItemsRendered, ref }) => (\n              <Grid\n                ref={ref}\n                onItemsRendered={(onItemsRendered as unknown) as (props: GridOnItemsRenderedProps) => unknown}\n                columnCount={4}\n                columnWidth={COLUMN_WIDTH + GUTTER_SIZE}\n                height={height}\n                rowCount={5}\n                rowHeight={ROW_HEIGHT + GUTTER_SIZE}\n                width={width}\n              >\n                {(props) => <Cell {...props} />}\n              </Grid>\n            )}\n          </InfiniteLoader>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst ApolloWrapper = ({ apollo }: ApolloProps): JSX.Element => (\n  <ApolloProvider client={apollo}>\n    <CardGrid />\n  </ApolloProvider>\n);\nexport default WithApollo(ApolloWrapper);\n"]},"metadata":{},"sourceType":"module"}