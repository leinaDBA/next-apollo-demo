{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloProvider, gql, useLazyQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nimport Card from '../components/Card';\nimport styles from './list.module.css';\nimport { useEffect, useState } from 'react';\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = () => {\n  const {\n    0: cardData,\n    1: setCardData\n  } = useState([]);\n  const {\n    fetchData\n  } = useLazyQuery(query, {\n    onCompleted: ({\n      list\n    }) => setCardData(list)\n  });\n  useEffect(fetchData, []);\n\n  if (!cardData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  const loadMore = async () => {\n    await fetchData();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: cardData.map((person, index) => /*#__PURE__*/_createElement(Card, _objectSpread(_objectSpread({}, person), {}, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      })))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nconst ApolloWrapper = ({\n  apollo\n}) => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: apollo,\n  children: /*#__PURE__*/_jsxDEV(CardGrid, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 46,\n  columnNumber: 3\n}, this);\n\nexport default WithApollo(ApolloWrapper);","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["ApolloProvider","gql","useLazyQuery","WithApollo","Card","styles","useEffect","useState","query","CardGrid","cardData","setCardData","fetchData","onCompleted","list","loadMore","container","map","person","index","ApolloWrapper","apollo"],"mappings":";;;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,GAAzB,EAA2CC,YAA3C,QAA+D,gBAA/D;AACA,OAAOC,UAAP,MAAwC,oBAAxC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,KAAK,GAAGP,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMQ,QAAQ,GAAG,MAAmB;AAClC,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BJ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAA6BV,YAAY,CAACM,KAAD,EAAQ;AACrDK,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcH,WAAW,CAACG,IAAD;AADe,GAAR,CAA/C;AAGAR,EAAAA,SAAS,CAACM,SAAD,EAAY,EAAZ,CAAT;;AAEA,MAAI,CAACF,QAAL,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMK,QAAQ,GAAG,YAA2B;AAC1C,UAAMH,SAAS,EAAf;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEG,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAEV,MAAM,CAACW,SAAvB;AAAA,gBACGN,QAAQ,CAACO,GAAT,CAAa,CAACC,MAAD,EAASC,KAAT,kBACZ,eAAC,IAAD,kCAAUD,MAAV;AAAkB,QAAA,GAAG,EAAEC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAUD,CAzBD;;AA2BA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACpB,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEA,MAAxB;AAAA,yBACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;AAKA,eAAelB,UAAU,CAACiB,aAAD,CAAzB","sourcesContent":["import { ApolloProvider, gql, QueryResult, useLazyQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\nimport Card from '../components/Card';\nimport styles from './list.module.css';\nimport { useEffect, useState } from 'react';\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst CardGrid = (): JSX.Element => {\n  const [cardData, setCardData] = useState([]);\n  const { fetchData }: QueryResult = useLazyQuery(query, {\n    onCompleted: ({ list }) => setCardData(list),\n  });\n  useEffect(fetchData, []);\n\n  if (!cardData) {\n    return <div>Loading</div>;\n  }\n\n  const loadMore = async (): Promise<void> => {\n    await fetchData();\n  };\n\n  return (\n    <>\n      <button onClick={loadMore}>more</button>\n      <div className={styles.container}>\n        {cardData.map((person, index) => (\n          <Card {...person} key={index} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nconst ApolloWrapper = ({ apollo }: ApolloProps): JSX.Element => (\n  <ApolloProvider client={apollo}>\n    <CardGrid />\n  </ApolloProvider>\n);\nexport default WithApollo(ApolloWrapper);\n"]},"metadata":{},"sourceType":"module"}