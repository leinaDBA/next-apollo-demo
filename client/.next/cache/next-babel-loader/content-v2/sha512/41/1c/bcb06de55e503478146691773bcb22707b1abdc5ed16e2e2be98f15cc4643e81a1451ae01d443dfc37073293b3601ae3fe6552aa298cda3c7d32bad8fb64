{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FixedSizeGrid as Grid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { ApolloProvider, gql, useQuery } from '@apollo/client';\nimport WithApollo from '../lib/with-apollo';\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({\n  columnIndex,\n  rowIndex,\n  style\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: _objectSpread(_objectSpread({}, style), {}, {\n    left: style.left + GUTTER_SIZE,\n    top: style.top + GUTTER_SIZE,\n    width: style.width - GUTTER_SIZE,\n    height: style.height - GUTTER_SIZE,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#f8f8f0'\n  }),\n  children: [\"r\", rowIndex, \", c\", columnIndex]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this);\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\nconst LOADING = 1;\nconst LOADED = 2;\nconst itemStatusMap = {};\n\nconst isItemLoaded = index => !!itemStatusMap[index];\n\nconst loadMoreItems = (startIndex, stopIndex) => {\n  for (let index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n\n  return new Promise(resolve => setTimeout(() => {\n    for (let index = startIndex; index <= stopIndex; index++) {\n      itemStatusMap[index] = LOADED;\n    }\n\n    resolve();\n  }, 2500));\n};\n\nconst Example = () => {\n  const {\n    loading,\n    data,\n    refetch\n  } = useQuery(query);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n\n  console.log(data);\n\n  const loadMore = async () => {\n    const {\n      data\n    } = await refetch(); // eslint-disable-next-line no-debugger\n\n    debugger;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AutoSizer, {\n      defaul: true,\n      children: ({\n        height,\n        width\n      }) => /*#__PURE__*/_jsxDEV(InfiniteLoader, {\n        isItemLoaded: isItemLoaded,\n        itemCount: 1000,\n        loadMoreItems: loadMoreItems,\n        children: ({\n          onItemsRendered,\n          ref\n        }) => /*#__PURE__*/_jsxDEV(Grid, {\n          ref: ref,\n          onItemsRendered: onItemsRendered,\n          columnCount: 5,\n          columnWidth: COLUMN_WIDTH + GUTTER_SIZE,\n          height: height,\n          rowCount: 10,\n          rowHeight: ROW_HEIGHT + GUTTER_SIZE,\n          width: width,\n          children: props => /*#__PURE__*/_jsxDEV(Cell, _objectSpread({}, props), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nconst ApolloWrapper = ({\n  apollo\n}) => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: apollo,\n  children: /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 100,\n  columnNumber: 3\n}, this);\n\nexport default WithApollo(ApolloWrapper);","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["FixedSizeGrid","Grid","InfiniteLoader","AutoSizer","ApolloProvider","gql","useQuery","WithApollo","GUTTER_SIZE","COLUMN_WIDTH","ROW_HEIGHT","Cell","columnIndex","rowIndex","style","left","top","width","height","display","alignItems","justifyContent","backgroundColor","query","LOADING","LOADED","itemStatusMap","isItemLoaded","index","loadMoreItems","startIndex","stopIndex","Promise","resolve","setTimeout","Example","loading","data","refetch","console","log","loadMore","onItemsRendered","ref","props","ApolloWrapper","apollo"],"mappings":"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","sourcesContent":["import { FixedSizeGrid as Grid, GridOnItemsRenderedProps } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { ApolloProvider, gql, QueryResult, useQuery } from '@apollo/client';\nimport WithApollo, { ApolloProps } from '../lib/with-apollo';\n\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    style={{\n      ...style,\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0',\n    }}\n  >\n    r{rowIndex}, c{columnIndex}\n  </div>\n);\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst LOADING = 1;\nconst LOADED = 2;\nconst itemStatusMap = {};\nconst isItemLoaded = (index) => !!itemStatusMap[index];\nconst loadMoreItems = (startIndex, stopIndex) => {\n  for (let index = startIndex; index <= stopIndex; index++) {\n    itemStatusMap[index] = LOADING;\n  }\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      for (let index = startIndex; index <= stopIndex; index++) {\n        itemStatusMap[index] = LOADED;\n      }\n      resolve();\n    }, 2500),\n  );\n};\n\nconst Example = (): JSX.Element => {\n  const { loading, data, refetch }: QueryResult = useQuery(query);\n\n  if (loading) {\n    return <div>Loading</div>;\n  }\n\n  console.log(data);\n  const loadMore = async (): Promise<void> => {\n    const { data } = await refetch();\n    // eslint-disable-next-line no-debugger\n    debugger;\n  };\n\n  return (\n    <>\n      <button onClick={loadMore}>more</button>\n      <AutoSizer defaul>\n        {({ height, width }) => (\n          <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={1000} loadMoreItems={loadMoreItems}>\n            {({ onItemsRendered, ref }) => (\n              <Grid\n                ref={ref}\n                onItemsRendered={(onItemsRendered as unknown) as (props: GridOnItemsRenderedProps) => unknown}\n                columnCount={5}\n                columnWidth={COLUMN_WIDTH + GUTTER_SIZE}\n                height={height}\n                rowCount={10}\n                rowHeight={ROW_HEIGHT + GUTTER_SIZE}\n                width={width}\n              >\n                {(props) => <Cell {...props} />}\n              </Grid>\n            )}\n          </InfiniteLoader>\n        )}\n      </AutoSizer>\n    </>\n  );\n};\n\nconst ApolloWrapper = ({ apollo }: ApolloProps): JSX.Element => (\n  <ApolloProvider client={apollo}>\n    <Example />\n  </ApolloProvider>\n);\nexport default WithApollo(ApolloWrapper);\n"]},"metadata":{},"sourceType":"module"}