{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FixedSizeGrid as Grid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport { gql, useQuery } from '@apollo/client';\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({\n  columnIndex,\n  rowIndex,\n  style\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: _objectSpread(_objectSpread({}, style), {}, {\n    left: style.left + GUTTER_SIZE,\n    top: style.top + GUTTER_SIZE,\n    width: style.width - GUTTER_SIZE,\n    height: style.height - GUTTER_SIZE,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#f8f8f0'\n  }),\n  children: [\"r\", rowIndex, \", c\", columnIndex]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 3\n}, this);\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst Example = () => {\n  const {\n    loading,\n    data,\n    fetchMore\n  } = useQuery(query);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n\n  const loadMore = () => {\n    fetchMore({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMore,\n      children: \"more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteLoader\n    /* isItemLoaded={isItemLoaded}*/\n    , {\n      itemCount: 1000,\n      loadMoreItems: fetchMore,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        columnCount: 50,\n        columnWidth: COLUMN_WIDTH + GUTTER_SIZE,\n        height: 150,\n        rowCount: 100,\n        rowHeight: ROW_HEIGHT + GUTTER_SIZE,\n        width: 300,\n        children: Cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Example;","map":{"version":3,"sources":["/Users/le15/IdeaProjects/next-apollo-demo/client/pages/list.tsx"],"names":["FixedSizeGrid","Grid","InfiniteLoader","gql","useQuery","GUTTER_SIZE","COLUMN_WIDTH","ROW_HEIGHT","Cell","columnIndex","rowIndex","style","left","top","width","height","display","alignItems","justifyContent","backgroundColor","query","Example","loading","data","fetchMore","loadMore"],"mappings":";;;;;;;;;;AAAA,SAASA,aAAa,IAAIC,IAA1B,QAAsC,cAAtC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,GAAT,EAA2BC,QAA3B,QAA2C,gBAA3C;AAEA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,YAAY,GAAG,GAArB;AACA,MAAMC,UAAU,GAAG,EAAnB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,kBACX;AACE,EAAA,KAAK,kCACAA,KADA;AAEHC,IAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,GAAaP,WAFhB;AAGHQ,IAAAA,GAAG,EAAEF,KAAK,CAACE,GAAN,GAAYR,WAHd;AAIHS,IAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAcT,WAJlB;AAKHU,IAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,GAAeV,WALpB;AAMHW,IAAAA,OAAO,EAAE,MANN;AAOHC,IAAAA,UAAU,EAAE,QAPT;AAQHC,IAAAA,cAAc,EAAE,QARb;AASHC,IAAAA,eAAe,EAAE;AATd,IADP;AAAA,kBAaIT,QAbJ,SAaiBD,WAbjB;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAkBA,MAAMW,KAAK,GAAGjB,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMkB,OAAO,GAAG,MAAM;AACpB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA4CpB,QAAQ,CAACgB,KAAD,CAA1D;;AACA,MAAIE,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,QAAMG,QAAQ,GAAG,MAAM;AACrBD,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAFD;;AAGA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC;AAAe;AAAhB;AAAiD,MAAA,SAAS,EAAE,IAA5D;AAAkE,MAAA,aAAa,EAAED,SAAjF;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,WAAW,EAAE,EADf;AAEE,QAAA,WAAW,EAAElB,YAAY,GAAGD,WAF9B;AAGE,QAAA,MAAM,EAAE,GAHV;AAIE,QAAA,QAAQ,EAAE,GAJZ;AAKE,QAAA,SAAS,EAAEE,UAAU,GAAGF,WAL1B;AAME,QAAA,KAAK,EAAE,GANT;AAAA,kBAQGG;AARH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAiBD,CAzBD;;AA2BA,eAAea,OAAf","sourcesContent":["import { FixedSizeGrid as Grid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport { gql, QueryResult, useQuery } from '@apollo/client';\n\nconst GUTTER_SIZE = 5;\nconst COLUMN_WIDTH = 100;\nconst ROW_HEIGHT = 35;\n\nconst Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    style={{\n      ...style,\n      left: style.left + GUTTER_SIZE,\n      top: style.top + GUTTER_SIZE,\n      width: style.width - GUTTER_SIZE,\n      height: style.height - GUTTER_SIZE,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#f8f8f0',\n    }}\n  >\n    r{rowIndex}, c{columnIndex}\n  </div>\n);\n\nconst query = gql`\n  query {\n    list {\n      name\n      address\n      email\n      phone\n    }\n  }\n`;\n\nconst Example = () => {\n  const { loading, data, fetchMore }: QueryResult = useQuery(query);\n  if (loading) {\n    return <div>Loading</div>;\n  }\n  const loadMore = () => {\n    fetchMore({});\n  };\n  return (\n    <>\n      <button onClick={loadMore}>more</button>\n      <InfiniteLoader /* isItemLoaded={isItemLoaded}*/ itemCount={1000} loadMoreItems={fetchMore}>\n        <Grid\n          columnCount={50}\n          columnWidth={COLUMN_WIDTH + GUTTER_SIZE}\n          height={150}\n          rowCount={100}\n          rowHeight={ROW_HEIGHT + GUTTER_SIZE}\n          width={300}\n        >\n          {Cell}\n        </Grid>\n      </InfiniteLoader>\n    </>\n  );\n};\n\nexport default Example;\n"]},"metadata":{},"sourceType":"module"}